const express = require('express');
const multer = require('multer');
const fs = require('fs');
const pdfParse = require('pdf-parse');
const path = require('path');

const app = express();
const PORT = 3000;

// Set up multer storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ storage: storage });

// Predefined units to filter (specified by coder)
const unitsToFilter = {
  "pg": [],
  "mg": []
};

// Helper function to split each row into separate elements based on patterns (spaces, numbers, units)
const splitRowIntoElements = (row) => {
  return row
    .replace(/([a-zA-Z])(?=\d)/g, '$1 ')    // Add space between letters and numbers (e.g., "pg2.7" -> "pg 2.7")
    .replace(/(\d)(?=[a-zA-Z])/g, '$1 ')    // Add space between numbers and letters (e.g., "2.7pg" -> "2.7 pg")
    .replace(/(?=\d)(?<=\d\w)/g, ' ')       // Separate units like "pg", "mg", and "%".
    .trim()
    .split(/\s+/);                          // Split by one or more spaces
};

// Serve static files from the 'public' directory (this includes func.html)
app.use(express.static('public'));

// Route for uploading the PDF and extracting table data, filtering by units
app.post('/upload', upload.single('pdf'), async (req, res) => {
  const pdfPath = req.file.path;

  try {
    // Step 1: Read and parse the PDF file
    const pdfBuffer = fs.readFileSync(pdfPath);
    const pdfData = await pdfParse(pdfBuffer);

    // Step 2: Extract text and normalize new lines
    const cleanedText = pdfData.text
      .replace(/\r\n|\r|\n/g, '\n')  // Normalize new lines
      .trim();

    // Step 3: Split text into rows based on new line characters
    const rows = cleanedText.split('\n').map(row => {
      // Split row into words/columns by spaces or tabs and store as array
      return splitRowIntoElements(row);  // Use the helper function to split each row into elements
    });

    // Step 4: Filter data by predefined units
    rows.forEach(row => {
      row.forEach(word => {
        if (word.includes("pg")) {
          unitsToFilter["pg"].push(row);
        } else if (word.includes("mg")) {
          unitsToFilter["mg"].push(row);
        }
      });
    });

    // Step 5: Save the filtered arrays into JSON format
    const jsonFilePath = writeJsonToFile(unitsToFilter, path.basename(req.file.originalname, '.pdf'));

    // Return the JSON response with the filtered arrays
    res.json({
      message: 'PDF uploaded, table data extracted, and split into individual elements successfully.',
      jsonFilePath: jsonFilePath,
      filteredData: unitsToFilter
    });
    console.log(unitsToFilter["mg"][1][3]);
  } catch (err) {
    console.error('Error during PDF processing:', err);
    res.status(500).json({ message: 'Error processing PDF', error: err });
  }
});

// Helper function to write JSON data to a file
function writeJsonToFile(data, fileName) {
  const jsonFilePath = path.join(__dirname, 'uploads', fileName + '.json');
  fs.writeFileSync(jsonFilePath, JSON.stringify(data, null, 2));
  return jsonFilePath;
}

// Middleware to parse JSON request body
app.use(express.json());

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
